{"ast":null,"code":"import React from'react';import{Form,Input,Button,Checkbox}from'antd';import{UserOutlined,LockOutlined,MailOutlined}from'@ant-design/icons';var Signup=function Signup(){return/*#__PURE__*/React.createElement(Form,{className:\"auth\",name:\"register\",scrollToFirstError:true},/*#__PURE__*/React.createElement(Form.Item,{name:\"first\",rules:[{required:true,message:'Please input your first name!',whitespace:true}]},/*#__PURE__*/React.createElement(Input,{autocomplete:\"username\",prefix:/*#__PURE__*/React.createElement(UserOutlined,{className:\"site-form-item-icon\"}),placeholder:\"First name\"})),/*#__PURE__*/React.createElement(Form.Item,{name:\"last\",rules:[{required:true,message:'Please input your last name!',whitespace:true}]},/*#__PURE__*/React.createElement(Input,{autocomplete:\"username\",prefix:/*#__PURE__*/React.createElement(UserOutlined,{className:\"site-form-item-icon\"}),placeholder:\"Last name\"})),/*#__PURE__*/React.createElement(Form.Item,{name:\"email\",rules:[{type:'email',message:'The input is not a valid email!'},{required:true,message:'Please input your email!'}]},/*#__PURE__*/React.createElement(Input,{prefix:/*#__PURE__*/React.createElement(MailOutlined,{className:\"site-form-item-icon\"}),placeholder:\"Email\"})),/*#__PURE__*/React.createElement(Form.Item,{name:\"password\",rules:[{required:true,message:'Please input your password!'}],hasFeedback:true},/*#__PURE__*/React.createElement(Input.Password,{autocomplete:\"new-password\",prefix:/*#__PURE__*/React.createElement(LockOutlined,{className:\"site-form-item-icon\"}),placeholder:\"Password\"})),/*#__PURE__*/React.createElement(Form.Item,{name:\"confirm\",dependencies:['password'],hasFeedback:true,rules:[{required:true,message:'Please confirm your password!'},function(_ref){var getFieldValue=_ref.getFieldValue;return{validator:function validator(rule,value){if(!value||getFieldValue('password')===value){return Promise.resolve();}return Promise.reject('The two passwords that you entered do not match!');}};}]},/*#__PURE__*/React.createElement(Input.Password,{autocomplete:\"new-password\",prefix:/*#__PURE__*/React.createElement(LockOutlined,{className:\"site-form-item-icon\"}),placeholder:\"Confirm Password\"})),/*#__PURE__*/React.createElement(Form.Item,{name:\"agreement\",valuePropName:\"checked\",rules:[{validator:function validator(_,value){return value?Promise.resolve():Promise.reject('Should accept agreement');}}]},/*#__PURE__*/React.createElement(Checkbox,null,\"I have read the \",/*#__PURE__*/React.createElement(\"a\",{href:\"\"},\"agreement\"))),/*#__PURE__*/React.createElement(Form.Item,null,/*#__PURE__*/React.createElement(Button,{className:\"signup-form-button\",type:\"primary\",htmlType:\"submit\"},\"Register\")));};export default Signup;","map":{"version":3,"sources":["/Users/clairechen/react-flask-app/src/components/Auth/signup.js"],"names":["React","Form","Input","Button","Checkbox","UserOutlined","LockOutlined","MailOutlined","Signup","required","message","whitespace","type","getFieldValue","validator","rule","value","Promise","resolve","reject","_"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Form, Input, Button, Checkbox } from 'antd';\nimport { UserOutlined, LockOutlined, MailOutlined } from '@ant-design/icons';\n\nconst Signup = () => {\n    return (\n        <Form\n            className=\"auth\"\n            name=\"register\"\n            scrollToFirstError\n        >\n            <Form.Item\n                name=\"first\"\n                rules={[\n                {\n                    required: true,\n                    message: 'Please input your first name!',\n                    whitespace: true,\n                },\n                ]}>\n                <Input autocomplete=\"username\" prefix={<UserOutlined className=\"site-form-item-icon\" />} placeholder=\"First name\" />\n            </Form.Item>\n\n            <Form.Item\n                name=\"last\"\n                rules={[\n                {\n                    required: true,\n                    message: 'Please input your last name!',\n                    whitespace: true,\n                },\n                ]}>\n                <Input autocomplete=\"username\" prefix={<UserOutlined className=\"site-form-item-icon\" />} placeholder=\"Last name\" />\n            </Form.Item>\n\n            <Form.Item\n                name=\"email\"\n                rules={[\n                {\n                    type: 'email',\n                    message: 'The input is not a valid email!',\n                },\n                {\n                    required: true,\n                    message: 'Please input your email!',\n                },\n                ]}>\n                <Input prefix={<MailOutlined className=\"site-form-item-icon\" />} placeholder=\"Email\" />\n            </Form.Item>\n\n            <Form.Item\n                name=\"password\"\n                rules={[\n                {\n                    required: true,\n                    message: 'Please input your password!',\n                },\n                ]}\n                hasFeedback\n            >\n                <Input.Password autocomplete=\"new-password\" prefix={<LockOutlined className=\"site-form-item-icon\" />} placeholder=\"Password\" />\n            </Form.Item>\n\n            <Form.Item\n                name=\"confirm\"\n                dependencies={['password']}\n                hasFeedback\n                rules={[\n                {\n                    required: true,\n                    message: 'Please confirm your password!',\n                },\n                ({ getFieldValue }) => ({\n                    validator(rule, value) {\n                    if (!value || getFieldValue('password') === value) {\n                        return Promise.resolve();\n                    }\n\n                    return Promise.reject('The two passwords that you entered do not match!');\n                    },\n                }),\n                ]}>\n                <Input.Password autocomplete=\"new-password\" prefix={<LockOutlined className=\"site-form-item-icon\" />} placeholder=\"Confirm Password\" />\n            </Form.Item>\n\n            <Form.Item\n                name=\"agreement\"\n                valuePropName=\"checked\"\n                rules={[\n                {\n                    validator: (_, value) =>\n                    value ? Promise.resolve() : Promise.reject('Should accept agreement'),\n                },\n                ]}>\n                <Checkbox>\n                I have read the <a href=\"\">agreement</a>\n                </Checkbox>\n            </Form.Item>\n            <Form.Item>\n                <Button className=\"signup-form-button\" type=\"primary\" htmlType=\"submit\">\n                Register\n                </Button>\n            </Form.Item>\n        </Form>\n    );\n}\n\nexport default Signup;"]},"metadata":{},"sourceType":"module"}